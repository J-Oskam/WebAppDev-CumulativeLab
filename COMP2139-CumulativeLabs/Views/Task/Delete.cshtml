@model ProjectTask

@{
    ViewData["Title"] = "Delete Task";
}

<h1>Delete Task</h1>

<h3>Are you sure you want to delete this task?</h3>
<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Project.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Project.Name)
        </dd>
    </dl>
</div>

<form asp-action="DeleteConfirmed" method="post">
    <input type="hidden" asp-for="ProjectTaskId" /> <!-- passes projectId in a hidden field to the delete confirmed action without exposing it to the user-->
    @* @Html.HiddenFor(model => model.ProjectId); <-- these two hidden input fields are equivalent except for the different between what @html rendering provides you over a simple input field like above *@
        
    <input type="submit" value="Delete" class="btn btn-danger" />
    <a asp-action="Index" asp-route-projectId="@Model.ProjectId" class="btn btn-secondary">Back to List</a>
</form>

@section Scripts {
     <!--Client side validation-->
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}